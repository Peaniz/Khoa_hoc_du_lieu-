# Chương 6: Phân tích dữ liệu nâng cao

## 1. Phân tích thành phần chính (PCA)

### 1.1 Khái niệm cơ bản
- PCA là gì:
  + Kỹ thuật giảm chiều dữ liệu
  + Chuyển đổi dữ liệu sang không gian mới
  + Giữ lại thông tin quan trọng nhất
- Các thành phần chính:
  + Eigenvectors
  + Eigenvalues
  + Explained variance ratio

### 1.2 Cách hoạt động
- Các bước thực hiện:
  + Chuẩn hóa dữ liệu
  + Tính ma trận hiệp phương sai
  + Tính eigenvalues và eigenvectors
  + Chọn số thành phần
- Cách chọn số thành phần:
  + Scree plot
  + Cumulative variance ratio
  + Kaiser criterion

### 1.3 Ứng dụng
- Giảm chiều dữ liệu
- Trực quan hóa dữ liệu
- Feature extraction
- Noise reduction

## 2. Phân tích cụm (Clustering)

### 2.1 K-means Clustering
- Cách hoạt động:
  + Chọn k điểm trung tâm
  + Gán các điểm vào cụm gần nhất
  + Cập nhật vị trí trung tâm
  + Lặp lại cho đến hội tụ
- Cách chọn k:
  + Elbow method
  + Silhouette score
  + Gap statistic

### 2.2 DBSCAN
- Cách hoạt động:
  + Định nghĩa ε-neighborhood
  + Xác định core points
  + Tạo cụm dựa trên density
- Ưu điểm:
  + Phát hiện cụm có hình dạng bất kỳ
  + Không cần chỉ định số cụm
  + Xử lý được noise

### 2.3 Hierarchical Clustering
- Các phương pháp:
  + Agglomerative (bottom-up)
  + Divisive (top-down)
- Cách tính khoảng cách:
  + Single linkage
  + Complete linkage
  + Average linkage
  + Ward's method

## 3. Phân tích chuỗi thời gian

### 3.1 Các thành phần
- Trend:
  + Xu hướng dài hạn
  + Tăng/giảm theo thời gian
- Seasonality:
  + Mẫu lặp lại theo chu kỳ
  + Có thể dự đoán
- Noise:
  + Biến động ngẫu nhiên
  + Không thể dự đoán

### 3.2 Kiểm tra tính dừng
- Augmented Dickey-Fuller test:
  + Kiểm tra unit root
  + H0: Chuỗi không dừng
  + H1: Chuỗi dừng
- Phương pháp khác:
  + KPSS test
  + Phillips-Perron test

### 3.3 Phân tích mùa vụ
- Seasonal decomposition:
  + Tách các thành phần
  + Xem xét từng thành phần
- Dự báo:
  + ARIMA
  + SARIMA
  + Prophet

## 4. Hồi quy và dự báo

### 4.1 Hồi quy tuyến tính
- Mô hình:
  + y = β₀ + β₁x₁ + ... + βₙxₙ + ε
- Đánh giá:
  + R-squared
  + Adjusted R-squared
  + F-test
  + t-test

### 4.2 Hồi quy phi tuyến
- Các mô hình:
  + Polynomial regression
  + Spline regression
  + Kernel regression
- Đánh giá:
  + Cross-validation
  + AIC/BIC
  + Residual analysis

### 4.3 Dự báo
- Các phương pháp:
  + Moving average
  + Exponential smoothing
  + ARIMA/SARIMA
- Đánh giá:
  + MAE
  + RMSE
  + MAPE

## 5. Code Implementation

### 5.1 PCA Analysis
```python
def principal_component_analysis(X, n_components=2):
    # Chuẩn hóa dữ liệu
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)
    
    # Thực hiện PCA
    pca = PCA(n_components=n_components)
    X_pca = pca.fit_transform(X_scaled)
    
    # Vẽ biểu đồ explained variance ratio
    plt.figure(figsize=(10, 6))
    plt.plot(range(1, len(pca.explained_variance_ratio_) + 1),
             np.cumsum(pca.explained_variance_ratio_))
    plt.xlabel('Number of Components')
    plt.ylabel('Cumulative Explained Variance')
    plt.title('PCA - Explained Variance Ratio')
    plt.savefig('pca_variance_ratio.png')
    plt.close()
    
    # Vẽ scatter plot của 2 PC đầu tiên
    plt.figure(figsize=(10, 6))
    plt.scatter(X_pca[:, 0], X_pca[:, 1])
    plt.xlabel('First Principal Component')
    plt.ylabel('Second Principal Component')
    plt.title('PCA - First Two Components')
    plt.savefig('pca_scatter.png')
    plt.close()
    
    return X_pca, pca
```

### 5.2 Clustering Analysis
```python
def clustering_analysis(X):
    # K-means clustering
    kmeans = KMeans(n_clusters=3, random_state=42)
    kmeans_labels = kmeans.fit_predict(X)
    
    # DBSCAN clustering
    dbscan = DBSCAN(eps=0.5, min_samples=5)
    dbscan_labels = dbscan.fit_predict(X)
    
    # Vẽ kết quả
    plt.figure(figsize=(15, 5))
    
    # K-means plot
    plt.subplot(1, 2, 1)
    plt.scatter(X[:, 0], X[:, 1], c=kmeans_labels)
    plt.title('K-means Clustering')
    
    # DBSCAN plot
    plt.subplot(1, 2, 2)
    plt.scatter(X[:, 0], X[:, 1], c=dbscan_labels)
    plt.title('DBSCAN Clustering')
    
    plt.savefig('clustering_comparison.png')
    plt.close()
    
    return kmeans_labels, dbscan_labels
```

### 5.3 Time Series Analysis
```python
def time_series_analysis():
    # Tạo dữ liệu mẫu
    dates = pd.date_range(start='2020-01-01', periods=100, freq='D')
    np.random.seed(42)
    data = np.random.normal(0, 1, 100).cumsum()
    df = pd.DataFrame(data, index=dates, columns=['value'])
    
    # Kiểm tra tính dừng
    adf_result = adfuller(df['value'])
    print('ADF Statistic:', adf_result[0])
    print('p-value:', adf_result[1])
    
    # Phân tích mùa vụ
    decomposition = seasonal_decompose(df['value'], period=7)
    
    # Vẽ kết quả
    plt.figure(figsize=(15, 10))
    
    plt.subplot(4, 1, 1)
    plt.plot(df.index, df['value'])
    plt.title('Original Time Series')
    
    plt.subplot(4, 1, 2)
    plt.plot(df.index, decomposition.trend)
    plt.title('Trend')
    
    plt.subplot(4, 1, 3)
    plt.plot(df.index, decomposition.seasonal)
    plt.title('Seasonal')
    
    plt.subplot(4, 1, 4)
    plt.plot(df.index, decomposition.resid)
    plt.title('Residual')
    
    plt.tight_layout()
    plt.savefig('time_series_decomposition.png')
    plt.close()
    
    return decomposition
```

### 5.4 Regression Analysis
```python
def regression_analysis(X, y):
    # Hồi quy tuyến tính
    model = LinearRegression()
    model.fit(X, y)
    y_pred = model.predict(X)
    
    # Tính các metrics
    mse = mean_squared_error(y, y_pred)
    r2 = r2_score(y, y_pred)
    
    # Vẽ kết quả
    plt.figure(figsize=(10, 6))
    plt.scatter(y, y_pred)
    plt.plot([y.min(), y.max()], [y.min(), y.max()], 'r--')
    plt.xlabel('Actual Values')
    plt.ylabel('Predicted Values')
    plt.title('Regression Results')
    plt.savefig('regression_results.png')
    plt.close()
    
    return model, mse, r2
``` 